buildscript {
    ext {
        springBootVersion = '1.3.0.M4'
        springCloudStarterParentTrain = 'Brixton.BUILD-SNAPSHOT'
		    junitVersion = '4.12'
		    bootstrapVersion = '2.3.2'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://repo.spring.io/snapshot" }
    }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            classpath "io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE"
    }
}


// Apply versioning to all projects from versioning script.
allprojects {
	apply from: "$rootDir/gradle/versioning.gradle"
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'eclipse'
	apply plugin: 'jacoco'
  apply plugin: "io.spring.dependency-management"
  apply plugin: 'spring-boot'


	jacoco {
		toolVersion = "0.7.1.201405082137"
	//	reportsDir = file("$buildDir/customJacocoReportDir")
	}
	jacocoTestReport { group = "Reporting"
		description = "Generate Jacoco coverage reports after running tests."
		additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
		}

	test { finalizedBy jacocoTestReport }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        maven { url "http://repo.spring.io/milestone" }
        maven { url "http://repo.spring.io/snapshot" }
    }
	dependencies {

		//test packages

		testCompile "junit:junit:$junitVersion"

	}
}

project(':springboottrades-accounts') {

    jar {
        baseName = 'accounts'
    }
	description = "Micro-service to deal with accounts and user logins"

  dependencyManagement {
    imports {
       mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
    }
  }
    dependencies {
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"

		// test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"

                // Runtime
		runtime "org.hsqldb:hsqldb"
    }
}

project(':springboottrades-quotes') {

    jar {
        baseName = 'quotes'
    }
	description = "Micro-service to retrieve up to date quotes"
  dependencyManagement {
    imports {
       mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
    }
  }
    dependencies {
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"

		//runtime


		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
		testRuntime "com.jayway.jsonpath:json-path"
    }
}

project(':springboottrades-portfolio') {
    jar {
        baseName = 'portfolio'
    }
	description = "Micro-service to manage portfolios"
  dependencyManagement {
    imports {
       mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
    }
  }
    dependencies {
		compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"

		//runtime
		runtime "org.hsqldb:hsqldb"

		//test packages
		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    testRuntime "com.jayway.jsonpath:json-path"
		testRuntime "org.hsqldb:hsqldb"
    }
}

project(':springboottrades-web') {

    jar {
        baseName = 'web'
    }
	description = "Web interface to the springboot set of services"
  dependencyManagement {
    imports {
       mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
    }
  }
    dependencies {
		compile "org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}"
		compile "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-starter-eureka"
    compile "org.springframework.cloud:spring-cloud-starter-hystrix"
    compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    compile "org.springframework.cloud:spring-cloud-netflix-hystrix-dashboard"
		compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"

		runtime "org.webjars:bootstrap:${bootstrapVersion}"

		testCompile "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
    }
}

project (':registryServer') {
     jar {
        baseName = 'registry'
     }
     description = "Registry server for micro services"
     springBoot {
        requiresUnpack = ['com.netflix.eureka:eureka-core','com.netflix.eureka:eureka-client']
     }

   apply plugin: "io.spring.dependency-management"

   dependencyManagement {
     imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudStarterParentTrain}"
     }
   }
     dependencies {
         compile "org.springframework.cloud:spring-cloud-netflix-eureka-server"
     }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
